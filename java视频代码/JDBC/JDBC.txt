Java Database Connectivity
Java数据库连接，Java语言操作数据库
JDBC本质:官方(Sun公司)定义了一套操作所有关系型数据库的规则（接口），各个数据库厂商去实现这套接口，提供数据库驱动Jar包。
        我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类

步骤：
    1.导入驱动jar包
    2.注册驱动
    3.获取数据库连接对象Connection
    4.获取sql语句的对象 Statement
    5.执行sql，接收返回结果
    6.处理结果
    7.释放资源

代码实现：
    //1.导入驱动Jar包
    //file->project structure->modules->dependense->右边的+第一个
    //注册驱动
    Class.forName("com.mysql.cj.jdbc.Driver");
    //获取数据库连接对象
    //因为连接的数据库时mysql8版本，所以需要在url上添加?useSSL=false&serverTimezone=UTC 否则会报错
    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/zx_log?useSSL=false&serverTimezone=UTC","root","zx041400414.");
    //定义sql语句
    //对于字段中为string的内容用''包括
    String sql = "update work_log set work_place = '重庆' where work_id = 3";
    //获取执行sql的对象
    Statement stmt = conn.createStatement();
    //执行sql
    int count = stmt.executeUpdate(sql);
    //处理结果
    System.out.println(count);
    //释放资源
    stmt.close();
    conn.close();

详解各个对象：
    1.DriverManager:驱动管理对象
        功能：
            1.注册驱动：告诉程序该使用哪一个数据库驱动jar包
                static void registerDriver(Driver driver)：注册与给定的驱动程序DriverManager
                写代码使用 Class.forName("com.mysql.cj.jdbc.Driver");
                通过查看源码发现：在com.mysql.jdbc.Driver中存在静态代码块  这是mysql5中的，因为8中的jdbc是class文件，看不到
                    static{
                          try{
                                java.sql.DriverManager.registerDriver(new Driver());
                          }catch(SQLException E){
                                throw new RuntimeException("Can't register driver!)"
                          }
                注意：mysql5之后的驱动jar包可以省略注册驱动的步骤 因为META-INF.services.java.sql.Driver已经帮我们写了
                     系统会先读取这个东西
            2.获取数据库连接
                 方法：static Connection getConnection(String url, String user, String password)
                        参数：
                            url：指定连接的路径
                                语法：jdbc:mysql://ip地址(域名):端口号/数据库名称
                                细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为jdbc:mysql:///数据库名称
                            user:用户名
                            password:密码
    2.Connection：数据库连接对象
        1.功能：
            1.获取执行sql的对象
                Statement createStatement()
                PreparedStatement prepareStatement(String sql)
            2.管理事务
                开启事务：void setAutoCommit(boolean autoCommit)  调用该方法设置参数为false，即开启事务
                提交事务：void commit()
                回滚事务：void rollback()
    3.Statement：执行sql的对象
        1.执行sql
            1.boolean execute(String sql) 可以执行任意sql 了解
            2.int executeUpdate(String sql) 执行DML(insert、update、delete)语句 DDL(create,alter,drop)语句
                1.返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功，返回值>0则执行成功，反之则失败
            3.ResultSet executeQuery(String sql) 执行DQL(select)语句
        2.练习
            1.添加一条记录
            2.修改一条记录
            3.删除一条记录
    4.ResultSet：结果集对象，封装查询结果
        boolean next():游标向下移动一行,判断当前行是否是最后一行末尾（是否有数据），是，返回false，反之返回true
            getxxx(参数):获取数据
                 xxx:代表数据类型  如 int getInt(),  String getString()
                 参数：
                    1.int：代表列的编号，从1开始，如getString(1)
                    2.String:代表名称，如：getString(work_felling)
        注意：
            使用步骤：
                1.游标向下移动一行
                2.判断是否有数据
                2.获取数据
                while (rs.next()) {
                    //获取数据
                    int id = rs.getInt(1);
                    String place = rs.getString("work_place");
                    String felling = rs.getString("work_felling");
                    String things = rs.getString("work_things");

                    System.out.println(id + "---" + place + "---" + felling + "---" + things);
                }
        练习：
            定义一个方法,查询库student的表vendors的数据将其封装为对象，然后装载集合，返回打印
                1.定义vendors类
                2.定义方法public List<vendors> findAll(){}
                3.实现方法 select * from vendors;

    5.PreparedStatement：执行sql对象
        1.SQL注入问题：在拼接sql时，有一些特殊关键字参与字符串的拼接会造成安全性问题
            1.输入用户随便，输入密码：a' or 'a' = 'a
            2.select * from user where username = 'sadfqawd' and password = 'a' or 'a' = 'a'
        2.解决sql注入问题：使用PreparedStatement对象来解决
        3.预编译的SQL:参数使用?作为占位符
        4.步骤：
              1.导入驱动jar包
              2.注册驱动
              3.获取数据库连接对象Connection
              4.定义sql
                注意：sql的参数使用?作为占位符。如select * from user where username = ? and password = ?;
              5.获取sql语句的对象 PreparedStatement Connection.prepareStatement(String sql);
              6.给?赋值：
                方法：setXxx(参数1,参数2)
                    参数1：?的位置编号，从1开始
                    参数2：?的值
              7.执行sql，接收返回结果，不需要传递sql语句
              8.处理结果
              9.释放资源
        5.注意：后期都会使用PreparedStatement来完成增删改查的所有操作
            1.可以防止SQL注入
            2.效率更高

抽取JDBC工具类：JDBCUtils
    目的：简化书写
    分析：
        1.注册驱动也抽取
        2.抽取一个方法获取连接对象
            需求：不想传递参数（麻烦），还得保证工具类的通用性
            解决：配置文件
                jdbc.properties
                    url=
                    user=
                    password=
        3.抽取一个方法释放资源


练习：
    需求：
        1.通过键盘录用户名和密码
        2.判断用户是否登陆成功
            select * from user where username = "" and password = "";
            如果这个sql有查询结果，则成功，反之则失败
    步骤：
        1.创建数据库表 user表
            create table user(
                id int primary key auto_increment,
                username varchar(32),
                password varchar(32)
            );

            insert into user VALUES(null,'zhangsan','123');
            insert into user VALUES(null,'lisi','234');

JDBC控制事务
    1.事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败
    2.操作：
        1.开启事务
        2.提交事务
        3.回滚事务
    3.使用Connection对象来管理事务
        开启事务：setAutoCommit(boolean autoCommit):调用该方法设置参数为false，即开启事务
            在执行sql之前开启事务
        提交事务：commit()
            当所有sql都执行完提交事务
        回滚事务：rollback()
            在catch中回滚事务



1.数据库连接池
    1.概念：其实就是一个容器（集合），存放数据库连接的容器
        当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象
        用户访问完后，会将连接对象归还给容器
    2.好处：
        1.节约资源
        2.用户访问高效
    3.实现：
        1.标准接口：DataSource javax.sql包下的
            1.方法：
                获取链接：getConnection()
                归还链接：如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，
                          则不会再关闭连接了，而是归还链接
        2.一般我们不去实现它，由数据库厂商来实现
            1.C3P0:数据库连接池技术
            2.Druid:数据库连接池实现技术，由阿里巴巴提供
    4.C3P0:数据库连接池技术
        步骤：
            1.导入jar包 c3p0-0.9.5.2.jar  mchange-commons-java-0.2.11.jar
                不要忘记导入连接数据库的驱动jar包
            2.定义配置文件：
                名称：c3p0.properties or c3p0-config.xml
                路径：直接将文件放在src目录下即可
            3.创建核心对象 数据库连接池对象 CombopooledDataSource
            4.获取链接：getConnection
    5.Druid:数据库连接池实现技术，由阿里巴巴提供
        1.步骤：
            1.导入jar包 druid-1.0.9.jar
            2.定义配置文件
                是properties形式的
                可以是任意名称，可以放在任意目录下
            3.加载配置文件 Properties
            4.获取数据库连接池对象：通过工厂类来获取  DruidDataSourceFactory
            5.获取链接：getConnection
        2.定义工具类
            1.定义一个类 JDBCUtils
            2.提供静态代码块加载配置文件，初始化连接池对象
            3.提供方法
                1.获取连接方法：通过数据库连接池获取链接
                2.释放资源
                3.获取链接池的方法

2.Spring JDBC:JDBC Template
    Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发
    步骤：
        1.导入jar包
        2.创建JDBCTemplate对象。依赖于数据源DataSource
            JdbcTemplate template = new JdbcTemplate(ds);
        3.调用JdbcTemplate的方法来完成CRUD的操作
            update():执行DML语句。增删改查
            queryForMap():查询结果将结果封装为map集合 将列名作为key，将值作为value 将这条记录封装成map集合
                注意：这个方法查询的结果集长度只能是1
            queryForList():查询结果将结果封装为list集合
                注意：将每一条记录封装成map集合，再将map集合装载到list集合中就可以了
            query():查询结果将结果封装为JavaBean集合
                query的参数：RowMapper
                    一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装
                    new BeanPropertyRowMapper<类型>(类型.class)
            queryForObject():查询结果将结果封装为对象
                一般用于聚合函数的查询
        4.练习：
            需求：
                1.修改2号数据的money为30000
                2.添加一条记录
                3.删除刚才添加的记录
                4.查询id为1的记录，将其封装为Map集合
                5.查询所有记录，将其封装为List集合
                6.查询所有记录，将其封装为Test对象的List集合
                7.查询总记录数
